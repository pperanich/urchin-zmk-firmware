/*
 * 34-Key Split (3x5 + 2 thumbs/side) — ZMK keymap
 * Layers: BASE, EXT (extend/nav/edit), SYM (symbols), NUM (numpad)
 *
 * Combos (BASE only):
 *   w+e → ESC,  x+c → TAB,  i+o → BSPC,  ,+. → ENTER
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* ---- Layer indices ---- */
#define BASE 0
#define EXT  1
#define SYM  2
#define NUM  3

/ {
  /* Optional: key repeat behavior for REP+ on EXT */
  behaviors {
    rep: rep {
      compatible = "zmk,behavior-key-repeat";
      label = "KEY_REPEAT";
      #binding-cells = <0>;
    };
  }

  /* ========================= COMBOS (BASE) =========================
   * Index map assumption (row-major):
   *  row0:  0..9   -> Q W E R T  Y U I O P
   *  row1: 10..19  -> A S D F G  H J K L '
   *  row2: 20..29  -> Z X C V B  N M , . /
   *  thumbs: 30..33 (L-inner, L-outer, R-outer, R-inner or similar)
   */
  combos {
    compatible = "zmk,combos";

    combo_w_e_esc {
      timeout-ms = <50>;
      key-positions = <1 2>;        /* w + e */
      bindings = <&kp ESC>;
      layers = <BASE>;
    };

    combo_x_c_tab {
      timeout-ms = <50>;
      key-positions = <21 22>;      /* x + c */
      bindings = <&kp TAB>;
      layers = <BASE>;
    };

    combo_i_o_bspc {
      timeout-ms = <50>;
      key-positions = <7 8>;        /* i + o */
      bindings = <&kp BSPC>;
      layers = <BASE>;
    };

    combo_comma_dot_enter {
      timeout-ms = <50>;
      key-positions = <27 28>;      /* , + . */
      bindings = <&kp ENTER>;
      layers = <BASE>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    /* ========================== BASE (QWERTY) ========================== *
     * Thumbs (L→R):  EXT, SPACE, SHIFT, SYM
     */
    base_layer {
      label = "BASE";
      bindings = <
      /* row0 */  &kp Q   &kp W   &kp E   &kp R   &kp T        &kp Y   &kp U    &kp I    &kp O    &kp P
      /* row1 */  &kp A   &kp S   &kp D   &kp F   &kp G        &kp H   &kp J    &kp K    &kp L    &kp SEMI
      /* row2 */  &kp Z   &kp X   &kp C   &kp V   &kp B        &kp N   &kp M    &kp COMMA &kp DOT &kp SLASH
      /* thumb*/  &mo EXT            &kp SPACE                   &kp LSHFT        &mo SYM
      >;
    };

    /* ===================== EXT (Extend / Nav / Edit) =================== *
     * Left:  VOL−/VOL+, CTRL ALT CMD SHIFT, ESC/TAB/REP+
     * Right: HOME/PGDN/PGUP/END, ←↓↑→ + BSPC, REP+/ENTER/DEL
     * Thumb: ENTER (left), NUM (right)
     */
    ext_layer {
      label = "EXT";
      bindings = <
      /* row0 */  &trans   &trans   &kp C_VOL_DN &kp C_VOL_UP &trans    &kp HOME  &kp PG_DN &kp PG_UP &kp END  &trans
      /* row1 */  &kp LCTRL &kp LALT &kp LGUI    &kp LSHFT    &trans    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp BSPC
      /* row2 */  &kp ESC  &trans   &trans       &kp TAB      &rep      &rep      &kp ENTER &trans    &trans    &kp DEL
      /* thumb*/  &trans            &trans                     &kp ENTER          &mo NUM
      >;
    };

    /* ============================ SYM (Symbols) ======================== *
     * Left (vertical pairs):
     *   ! @ # $ %    |   '  ~  {  (  [    |   <  >  }  )  ]
     * Right:
     *   ^ & * - ;    |   :  SHIFT CMD ALT CTRL    |   |  _  =  +  \
     * Thumb: NUM on right
     */
    sym_layer {
      label = "SYM";
      bindings = <
      /* row0 */  &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5)   &kp LS(N6)  &kp LS(N7)  &kp LS(N8) &kp MINUS     &kp SEMI
      /* row1 */  &kp SQUOT  &kp LS(GRAVE) &kp LS(LBRC) &kp LS(N9) &kp LBRC &kp LS(SEMI) &kp LSHFT  &kp LGUI   &kp LALT     &kp LCTRL
      /* row2 */  &kp LS(COMMA) &kp LS(DOT) &kp LS(RBRC) &kp LS(N0) &kp RBRC &kp LS(BSLH) &kp LS(MINUS) &kp EQUAL &kp LS(EQUAL) &kp BSLH
      /* thumb*/  &mo NUM                  &trans                           &trans          &trans
      >;
    };

    /* ============================ NUM (Numpad) ========================= *
     * Right-hand calculator:
     *   7 8 9
     *   4 5 6
     *   0 1 2 3
     * Left row1 modifiers: CTRL ALT CMD SHIFT
     */
    num_layer {
      label = "NUM";
      bindings = <
      /* row0 */  &trans    &trans      &trans     &trans     &trans    &trans   &kp N7  &kp N8  &kp N9  &trans
      /* row1 */  &kp LCTRL &kp LALT    &kp LGUI   &kp LSHFT  &trans    &trans   &kp N4  &kp N5  &kp N6  &trans
      /* row2 */  &trans    &trans      &trans     &trans     &trans    &kp N0   &kp N1  &kp N2  &kp N3  &trans
      /* thumb*/  &trans                 &trans                 &trans            &trans
      >;
    };
  };
}

